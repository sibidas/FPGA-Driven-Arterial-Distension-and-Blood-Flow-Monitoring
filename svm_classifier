module svm_classifier (
    input wire clk,
    input wire rst,
    input wire [15:0] feature_in_0,
    input wire [15:0] feature_in_1,
    input wire [15:0] feature_in_2,
    input wire [15:0] feature_in_3,
    input wire [15:0] feature_in_4,
    input wire [15:0] feature_in_5,
    input wire [15:0] feature_in_6,
    input wire [15:0] feature_in_7,
    input wire [15:0] feature_in_8,
    input wire [15:0] feature_in_9,
    input wire [15:0] feature_in_10,
    input wire [15:0] feature_in_11,
    input wire signed [15:0] alpha0,  // Bias
    output reg result
);

    // SVM weights stored in registers (modifiable if needed)
    reg signed [15:0] alpha_0  = 16'sd1;
    reg signed [15:0] alpha_1  = 16'sd1;
    reg signed [15:0] alpha_2  = 16'sd1;
    reg signed [15:0] alpha_3  = 16'sd1;
    reg signed [15:0] alpha_4  = 16'sd1;
    reg signed [15:0] alpha_5  = 16'sd1;
    reg signed [15:0] alpha_6  = 16'sd1;
    reg signed [15:0] alpha_7  = 16'sd1;
    reg signed [15:0] alpha_8  = 16'sd1;
    reg signed [15:0] alpha_9  = 16'sd1;
    reg signed [15:0] alpha_10 = 16'sd1;
    reg signed [15:0] alpha_11 = 16'sd1;

    reg signed [31:0] sum;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            sum <= 0;
            result <= 0;
        end else begin
            sum <= $signed(alpha0)
                 + $signed(feature_in_0)  * alpha_0
                 + $signed(feature_in_1)  * alpha_1
                 + $signed(feature_in_2)  * alpha_2
                 + $signed(feature_in_3)  * alpha_3
                 + $signed(feature_in_4)  * alpha_4
                 + $signed(feature_in_5)  * alpha_5
                 + $signed(feature_in_6)  * alpha_6
                 + $signed(feature_in_7)  * alpha_7
                 + $signed(feature_in_8)  * alpha_8
                 + $signed(feature_in_9)  * alpha_9
                 + $signed(feature_in_10) * alpha_10
                 + $signed(feature_in_11) * alpha_11;

            result <= (sum > 0) ? 1'b1 : 1'b0;
        end
    end

endmodule
