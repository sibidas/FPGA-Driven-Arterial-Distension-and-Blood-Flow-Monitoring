`timescale 1ns / 1ps
module uart_tx_float (
    input wire clk,
    input wire rst,
    input wire start_tx,                  // Signal to start sending
    input wire [15:0] diameter_data,      // Diameter (fixed-point, e.g., 2.45 -> 245)
    input wire [15:0] velocity_data,      // Velocity (fixed-point, e.g., 19.75 -> 1975)
    output reg tx = 1,                    // UART transmit line
    output reg busy                       // High when transmission in progress
);

    // UART Parameters
    parameter CLK_FREQ = 100_000_000;      // 100 MHz clock
    parameter BAUD_RATE = 115200;
    localparam BAUD_TICK = CLK_FREQ / BAUD_RATE;

    // Internal
    reg [3:0] bit_index = 0;
    reg [15:0] baud_counter = 0;
    reg [7:0] tx_byte = 8'd0;
    reg [5:0] char_index = 0;
    reg [7:0] message[0:39];               // Buffer to hold full message
    reg sending = 0;

    integer i;
    reg [3:0] digit;
    reg [15:0] temp_diameter, temp_velocity;

    // State Machine
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            tx <= 1'b1;
            busy <= 0;
            sending <= 0;
            char_index <= 0;
            bit_index <= 0;
            baud_counter <= 0;
        end else begin
            if (start_tx && !busy) begin
                busy <= 1;
                sending <= 1;
                char_index <= 0;
                bit_index <= 0;
                baud_counter <= 0;

                // --- Format the message ---
                temp_diameter = diameter_data;  // Assume value like 245 -> 2.45
                temp_velocity = velocity_data;  // Assume value like 1975 -> 19.75

                // Diameter Integer Part
                message[0] = (temp_diameter / 100) + "0";
                // Decimal Point
                message[1] = ".";
                // Diameter Decimal Part
                message[2] = ((temp_diameter / 10) % 10) + "0";
                message[3] = (temp_diameter % 10) + "0";
                // Comma Separator
                message[4] = ",";
                // Velocity Integer Part
                message[5] = (temp_velocity / 100) / 10 + "0";
                message[6] = (temp_velocity / 100) % 10 + "0";
                // Decimal Point
                message[7] = ".";
                // Velocity Decimal Part
                message[8] = ((temp_velocity / 10) % 10) + "0";
                message[9] = (temp_velocity % 10) + "0";
                // End of Line: Carriage Return + Line Feed
                message[10] = 8'd13; // '\r'
                message[11] = 8'd10; // '\n'
            end

            // --- Send Each Byte Bit-by-Bit ---
            if (sending) begin
                if (baud_counter == 0) begin
                    case (bit_index)
                        0: begin
                            tx <= 0; // Start bit
                            bit_index <= bit_index + 1;
                        end
                        1,2,3,4,5,6,7,8: begin
                            tx <= message[char_index][bit_index-1];
                            bit_index <= bit_index + 1;
                        end
                        9: begin
                            tx <= 1; // Stop bit
                            bit_index <= bit_index + 1;
                        end
                        10: begin
                            bit_index <= 0;
                            char_index <= char_index + 1;
                            if (char_index == 11) begin
                                busy <= 0;
                                sending <= 0;
                            end
                        end
                    endcase
                    baud_counter <= BAUD_TICK;
                end else begin
                    baud_counter <= baud_counter - 1;
                end
            end
        end
    end
endmodule
