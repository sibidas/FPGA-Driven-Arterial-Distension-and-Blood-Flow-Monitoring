`timescale 1ns / 1ps
module top_module(
    input wire clk,           // 100 MHz clock
    input wire rst,           // Active-high reset
    output wire uart_tx       // UART TX line to PC
);

    // Interconnecting wires
    wire [11:0] adc_out;
    wire [15:0] agc_out;
    wire [15:0] tgc_out;
    wire [15:0] filtered_out;
    wire [15:0] gated_signal;
    wire [15:0] pooled_out;
    wire wall_detected;
    wire [2:0] fsm_state;
    wire [15:0] doppler_freq;
    wire [15:0] blood_velocity;
    wire uart_busy;
    reg start_uart;
    wire artery_or_vein;
    
        wire arterial_flow_detected;
    wire distension_detected;
    wire dist_flag;
    wire [7:0] adc_data_monitor;
    assign adc_data_monitor = adc_out[7:0]; // Truncate for 8-bit monitor module

    wire [15:0] baseline_diameter = 16'd120; // Example fixed baseline



    // === Submodule Connections ===

    adc_interface U1 (
        .clk(clk),
        .rst(rst),
        .echo_signal(adc_out)
    );

    agc_module U2 (
        .clk(clk),
        .rst(rst),
        .signal_in({4'b0000, adc_out}), // Extend to 16-bit
        .agc_out(agc_out)
    );

    tgc_module U3 (
        .clk(clk),
        .rst(rst),
        .adc_in(agc_out[11:0]),
        .tgc_out(tgc_out)
    );

    fir_filter U4 (
        .clk(clk),
        .rst(rst),
        .signal_in(tgc_out),
        .filtered_out(filtered_out)
    );

    range_gate_positioning U5 (
        .clk(clk),
        .rst(rst),
        .signal_in(filtered_out),
        .gated_signal(gated_signal)
    );

    conv_pool U6 (
        .clk(clk),
        .rst(rst),
        .signal_in(gated_signal),
        .pooled_out(pooled_out)
    );

    svm_classifier U7 (
        .clk(clk),
        .rst(rst),
        .feature_in_0(pooled_out),
        .feature_in_1(pooled_out),
        .feature_in_2(pooled_out),
        .feature_in_3(pooled_out),
        .feature_in_4(pooled_out),
        .feature_in_5(pooled_out),
        .feature_in_6(pooled_out),
        .feature_in_7(pooled_out),
        .feature_in_8(pooled_out),
        .feature_in_9(pooled_out),
        .feature_in_10(pooled_out),
        .feature_in_11(pooled_out),
        .alpha0(-16'sd100),
        .result(wall_detected)
    );

    fsm_controller U8 (
        .clk(clk),
        .rst(rst),
        .probe_stable(1'b1),  // Assuming probe is always stable
        .wall_detected(wall_detected),
        .state(fsm_state)
    );

    doppler_fft_mock U9 (
        .clk(clk),
        .rst(rst),
        .signal_in(pooled_out),
        .freq_shift(doppler_freq)
    );

    velocity_calc U10 (
        .clk(clk),
        .rst(rst),
        .doppler_freq(doppler_freq),
        .velocity(blood_velocity)
    );

    uart_tx_float U11 (
        .clk(clk),
        .rst(rst),
        .start_tx(start_uart),
        .diameter_data(pooled_out),
        .velocity_data(blood_velocity),
        .tx(uart_tx),
        .busy(uart_busy)
    );
    
    svm_classifier_2 U12 (
        .clk(clk),
        .rst(rst),
        .feature_vector(blood_velocity),
        .class_out(artery_or_vein)
    );

    arterial_distension_monitor U13 (
        .clk(clk),
        .rst(rst),
        .adc_data(adc_data_monitor),
        .uart_rx(1'b0),  // If unused, tie to 0
        .uart_tx(),      // Not connected to main uart_tx directly
        .arterial_flow_detected(arterial_flow_detected),
        .distension_detected(distension_detected)
    );


    distension_detect U14 (
        .clk(clk),
        .reset(rst),
        .current_diameter(pooled_out),
        .baseline_diameter(baseline_diameter),
        .distension_flag(dist_flag)
    );


    // UART send pulse every 50ms
    reg [23:0] uart_counter;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            uart_counter <= 0;
            start_uart <= 0;
        end else begin
            if (uart_counter >= 5_000_000) begin // ~50ms at 100MHz
                uart_counter <= 0;
                if (!uart_busy)
                    start_uart <= 1;
            end else begin
                uart_counter <= uart_counter + 1;
                start_uart <= 0;
            end
        end
    end

endmodule
